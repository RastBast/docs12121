package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const workflowTemplate = `name: OpenAPI Docs Aggregator
run: Aggregating OpenAPI docs from ${{ gitea.repository }}

on:
  push:
    branches:
      - main
      - staging
      - dev
    paths:
      - 'docs/openapi.yaml'

jobs:
  aggregate-openapi:
    runs-on: ubuntu-latest
    if: ${{ gitea.repository != '%s/docs' }}
    
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITEA_TOKEN }}
      - name: Extract repository info
        id: repo_info
        run: |
          REPO_NAME=$(echo "${{ gitea.repository }}" | cut -d'/' -f2)
          BRANCH_NAME=$(echo "${{ gitea.ref }}" | sed 's|refs/heads/||')
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      - name: Check if OpenAPI file exists
        id: check_file
        run: |
          if [ -f "docs/openapi.yaml" ]; then
            echo "file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "OpenAPI file not found in docs/openapi.yaml"
            exit 1
          fi
      - name: Clone docs repository
        run: |
          git clone https://${{ secrets.GITEA_TOKEN }}@%s/%s/docs.git docs-repo
          cd docs-repo
          if git show-branch remotes/origin/${{ steps.repo_info.outputs.branch_name }} 2>/dev/null; then
            git checkout ${{ steps.repo_info.outputs.branch_name }}
          else
            git checkout -b ${{ steps.repo_info.outputs.branch_name }}
          fi
      - name: Copy OpenAPI file
        run: |
          mkdir -p docs-repo/${{ steps.repo_info.outputs.repo_name }}
          cp docs/openapi.yaml docs-repo/${{ steps.repo_info.outputs.repo_name }}/openapi.yaml
      - name: Commit and push changes
        run: |
          cd docs-repo
          git config user.name "OpenAPI Aggregator Bot"
          git config user.email "openapi-bot@%s"
          git add ${{ steps.repo_info.outputs.repo_name }}/openapi.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update OpenAPI docs for ${{ steps.repo_info.outputs.repo_name }} from branch ${{ steps.repo_info.outputs.branch_name }}"
            git push origin ${{ steps.repo_info.outputs.branch_name }}
          fi
`

type Config struct {
	GiteaHost    string
	Organization string
	Repositories []string
	DocsRepo     string
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: go run main.go <–∫–æ–º–∞–Ω–¥–∞>\n–ö–æ–º–∞–Ω–¥—ã: generate, setup")
	}

	switch os.Args[1] {
	case "generate":
		generateWorkflows()
	case "setup":
		setupProject()
	default:
		log.Fatal("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: generate, setup")
	}
}

func generateWorkflows() {
	cfg := getConfig()

	workflowDir := ".gitea/workflows"
	if err := os.MkdirAll(workflowDir, 0o755); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}

	content := fmt.Sprintf(workflowTemplate,
		cfg.Organization,
		cfg.GiteaHost,
		cfg.Organization,
		cfg.GiteaHost,
	)

	path := filepath.Join(workflowDir, "openapi-aggregator.yml")
	if err := os.WriteFile(path, []byte(content), 0o644); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v", err)
	}

	fmt.Printf("‚úÖ –í–æ—Ä–∫—Ñ–ª–æ—É —Å–æ–∑–¥–∞–Ω: %s\n", path)
	createReadme(cfg)
}

func setupProject() {
	fmt.Println("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

	cfg := getConfigInteractive()

	env := fmt.Sprintf(`GITEA_HOST=%s
ORGANIZATION=%s
DOCS_REPO=%s
REPOSITORIES=%s
`,
		cfg.GiteaHost,
		cfg.Organization,
		cfg.DocsRepo,
		strings.Join(cfg.Repositories, ","),
	)
	if err := os.WriteFile(".env", []byte(env), 0o644); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: %v", err)
	}
	fmt.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env")

	generateWorkflows()
}

func getConfig() Config {
	return Config{
		GiteaHost:    getEnvOrDefault("GITEA_HOST", "gitea.example.com"),
		Organization: getEnvOrDefault("ORGANIZATION", "myorg"),
		DocsRepo:     getEnvOrDefault("DOCS_REPO", "docs"),
		Repositories: strings.Split(getEnvOrDefault("REPOSITORIES", "repo1,repo2,repo3"), ","),
	}
}

func getConfigInteractive() Config {
	var cfg Config
	fmt.Print("–•–æ—Å—Ç Gitea: ")
	fmt.Scanln(&cfg.GiteaHost)
	fmt.Print("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ")
	fmt.Scanln(&cfg.Organization)
	fmt.Print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'docs'): ")
	fmt.Scanln(&cfg.DocsRepo)
	if cfg.DocsRepo == "" {
		cfg.DocsRepo = "docs"
	}
	fmt.Print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
	var repos string
	fmt.Scanln(&repos)
	cfg.Repositories = strings.Split(repos, ",")
	return cfg
}

func createReadme(cfg Config) {
	content := fmt.Sprintf(`# OpenAPI Documentation Aggregator

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- Gitea Host: %s
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: %s
- –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: %s
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: %s

## –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
1. –ü—É—à –≤ –≤–µ—Ç–∫–∏ main, staging –∏–ª–∏ dev.
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ docs/openapi.yaml.
3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
4. –ö–æ–º–º–∏—Ç –∏ –ø—É—à.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
%s/
‚îú‚îÄ‚îÄ %s/
‚îÇ   ‚îî‚îÄ‚îÄ openapi.yaml
‚îú‚îÄ‚îÄ %s/
‚îÇ   ‚îî‚îÄ‚îÄ openapi.yaml
‚îî‚îÄ‚îÄ %s/
    ‚îî‚îÄ‚îÄ openapi.yaml
`,
		cfg.GiteaHost,
		cfg.Organization,
		cfg.DocsRepo,
		strings.Join(cfg.Repositories, ", "),
		cfg.DocsRepo,
		cfg.Repositories[0],
		cfg.Repositories[1],
		cfg.Repositories[2],
	)
	if err := os.WriteFile("README.md", []byte(content), 0o644); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å README.md: %v", err)
	} else {
		fmt.Println("‚úÖ README.md —Å–æ–∑–¥–∞–Ω")
	}
}

func getEnvOrDefault(key, def string) string {
	if v := os.Getenv(key); v != "" {
		return v
	}
	return def
}
